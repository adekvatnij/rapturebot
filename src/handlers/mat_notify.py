# coding=UTF-8
import random
from typing import List

import telegram

from src.config import CONFIG
from src.modules.antimat import Antimat
from src.modules.matshowtime import matshowtime
from src.utils.cache import pure_cache, FEW_DAYS, USER_CACHE_EXPIRE
from src.utils.time_helpers import get_current_monday_str


def mat_notify(bot: telegram.Bot, update: telegram.Update):
    message = update.message
    text = message.text if message.text else message.caption
    if text is None:
        return

    # –ø–æ–ª—É—á–∞–µ–º –º–∞—Ç–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    mat_words = list(word.lower() for word in Antimat.bad_words(text))
    if len(mat_words) == 0:
        return

    cid = message.chat_id
    uid = message.from_user.id

    matshowtime.send(bot, mat_words)

    # —á—É–∂–∏–µ —Ñ–æ—Ä–≤–∞—Ä–¥—ã –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º
    if is_foreign_forward(uid, message):
        return

    # –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –≤ —Ä–µ–¥–∏—Å–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    # –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º
    # –ø–æ—ç—Ç–æ–º—É —ç—Ç–æ—Ç –≤—ã–∑–æ–≤ —Å—Ç–æ–∏—Ç –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ —Ñ–æ—Ä–≤–∞—Ä–¥—ã
    save_to_redis(cid, mat_words)

    # –Ω–∞–º –Ω—É–∂–Ω–æ —É–≤–µ–¥–æ–º–ª—è—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?
    if uid not in CONFIG.get('mat_notify_uids', []):
        return

    message_id = message.message_id
    send_mat_notify(bot, cid, mat_words, message_id)


def send_mat_notify(bot: telegram.Bot, cid: int, mat_words: List[str], message_id: int) -> None:
    phrases = [
        '–ò —ç—Ç–∏–º–∏ —É—Å—Ç–∞–º–∏ —Ç—ã —Ü–µ–ª—É–µ—à—å –ø–∞–ø–æ—á–∫—É?',
        '–ö–∞–∫ –≥—Ä—É–±–æ!',
        '–ê –ø–æ—Ç–æ–º –≤ –º—É–∑–µ–π, –¥–∞?',
        '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω–∏–º–∞—é.',
        '–°–∞–∂–∞, –∫–∞–∫ –∂–µ —Ç–∞–∫!?',
        '–°–∞–ø–æ–∂–Ω–∏—Ü–∞!',
    ]
    mat_words_str = ', '.join(word.upper() for word in mat_words)
    msg = f'{random.choice(phrases)} üôà\n\n<b>{mat_words_str}</b>'
    bot.send_message(cid, msg, reply_to_message_id=message_id, parse_mode=telegram.ParseMode.HTML)


def is_foreign_forward(uid: int, message: telegram.Message) -> bool:
    """
    –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ -- —á—É–∂–æ–π —Ñ–æ—Ä–≤–∞—Ä–¥?
    """
    # —ç—Ç–æ –≤–æ–æ–±—â–µ —Ñ–æ—Ä–≤–∞—Ä–¥?
    if not message.forward_date:
        return False
    # –≤–µ—Ä–Ω–µ—Ç False –µ—Å–ª–∏ —ç—Ç–æ —Ñ–æ—Ä–≤–∞—Ä–¥ –æ—Ç uid
    return message.forward_from is None or message.forward_from.id != uid


def save_to_redis(cid: int, mat_words: List[str]) -> None:
    monday = get_current_monday_str()

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ —Ä–µ–¥–∏—Å, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
    pure_cache.add_to_set(f"mat:daily_uniq:{monday}", mat_words, time=FEW_DAYS)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–ª–æ–≤–∞–º
    pure_cache.append_list(f'mat:words:{monday}:{cid}', mat_words, time=USER_CACHE_EXPIRE)
