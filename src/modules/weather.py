import json
import os
from multiprocessing.dummy import Pool as ThreadPool
from threading import Lock
from typing import Union, Optional

import arrow
import requests
import telegram
from telegram.ext import run_async

from src.config import CONFIG
from src.utils.cache import cache
from src.utils.handlers_decorators import chat_guard, collect_stats, command_guard
from src.utils.logger_helpers import get_logger
from src.utils.telegram_helpers import dsp

TMP_DIR = '../../tmp/weather/'
full_moon_lock = Lock()
logger = get_logger(__name__)


@run_async
@chat_guard
@collect_stats
@command_guard
def weather(bot: telegram.Bot, update: telegram.Update) -> None:
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –≥–æ—Ä–æ–¥–æ–≤:
    - –≤ —è–Ω–¥–µ–∫—Å.–∫–∞—Ä—Ç–∞—Ö –≤–±–∏–≤–∞–µ–º –∏–º—è –≥–æ—Ä–æ–¥–∞, —Ç–∞–º –∂–µ –±—É–¥—É—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –µ–≥–æ
    - –≤–±–∏–≤–∞–µ–º –∏—Ö —Å—é–¥–∞ https://darksky.net/forecast/59.9387,30.3162/si12/en
    - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏, –∫–æ–ø–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    - —á–µ—Ä–µ–∑ api –∑–∞–ø—Ä–æ—Å –∫ darksky –º–æ–∂–Ω–æ –≤—ã—Ü–µ–ø–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    """
    send_weather_now(bot, update)


def send_weather_now(bot: telegram.Bot, update: telegram.Update) -> None:
    chat_id = update.message.chat_id

    if cache.get(f'weather:{chat_id}:now:start_collect'):
        return
    cache.set(f'weather:{chat_id}:now:start_collect', True, 90)

    cached_key = f'weather:{chat_id}:now:result'
    cached_result = cache.get(cached_key)
    if cached_result is not None:
        bot.send_message(chat_id, cached_result, parse_mode=telegram.ParseMode.HTML,
                         disable_web_page_preview=True)
        return

    debug = CONFIG.get('weather_debug')
    weather_cities = CONFIG.get('weather_cities', {}).get(str(chat_id), [])
    if len(weather_cities) == 0:
        bot.send_message(chat_id, '–ó–∞–±—ã–ª–∏ –≥–æ—Ä–æ–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥')
        return

    bot.send_chat_action(chat_id, telegram.ChatAction.TYPING)
    jsons = make_requests(chat_id, weather_cities, debug=debug)
    cities = parse_jsons(jsons)

    poweredby = f"\n<a href='https://yandex.ru/pogoda'>–ü–æ –¥–∞–Ω–Ω—ã–º –Ø–Ω–¥–µ–∫—Å.–ü–æ–≥–æ–¥—ã</a>"
    cities_joined = "\n".join(cities)
    result = f"–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å:\n\n{cities_joined}{poweredby}"
    cache.set(cached_key, result, 30 * 60)  # —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –∫—ç—à–µ 30 –º–∏–Ω—É—Ç

    bot.send_message(chat_id, result, parse_mode=telegram.ParseMode.HTML,
                     disable_web_page_preview=True)


@run_async
def send_alert_if_full_moon(bot: telegram.Bot, chat_id: int) -> None:
    """
    –°–µ–≥–æ–¥–Ω—è –ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ? –û–ø–æ–≤–µ—â–∞–µ—Ç —á–∞—Ç.
    """
    # —Ç.–∫. –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è run_async, —Ç–æ –º—ã –º–æ–∂–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤—ã–∑–≤–∞—Ç—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥.
    # –Ω–æ –º—ã –Ω–µ —Ö–æ—Ç–∏–º –¥–µ–ª–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –∞–ø–∏.
    # –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ä–µ–¥–∏—Å.
    logger.debug(f'full_moon_lock')
    with full_moon_lock:
        full_moon: Optional[bool] = cache.get('weather:full_moon', None)
        if full_moon is None:
            full_moon = full_moon_request()
            cache.set('weather:full_moon', full_moon, time=6 * 60 * 60)  # 6 hours
    if full_moon:
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å
        dsp(_send_full_moon_alert, bot, chat_id)


def _send_full_moon_alert(bot, chat_id):
    """
    –í—ã–Ω–µ—Å –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ `dsp`
    """
    bot.send_message(chat_id, "–°–µ–≥–æ–¥–Ω—è:\n\n–ü–û–õ–ù–û–õ–£–ù–ò–ï üåë –ë–ï–†–ï–ì–ò–°–¨ –û–ë–û–†–û–¢–ù–ï–ô", parse_mode='HTML')


def full_moon_request() -> bool:
    """
    –û–±—Ä–∞—â–∞–µ—Ç—Å—è –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ –ª–∏.
    """
    response = request_wu('Russia/Moscow')
    if response['error']:
        return False
    try:
        js = response['json']
        # noinspection PyTypeChecker
        if js['moon_phase']['phaseofMoon'] == "–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ":
            return True
    except Exception:
        pass
    return False


def request_wu(city_code: str):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —É –∞–ø–∏ –ø–æ–≥–æ–¥—É –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≥–æ—Ä–æ–¥—É —á–µ—Ä–µ–∑ WU.

    :param str city_code: –∫–æ–¥ –≥–æ—Ä–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'Country/City'
    """
    api_key = CONFIG.get('weather_wunderground_api_key')
    if not api_key:
        return
    features = 'conditions/astronomy/forecast/hourly/almanac'
    url_template = 'http://api.wunderground.com/api/{}/{}/lang:RU/q/{}.json'
    url = url_template.format(api_key, features, city_code.replace(' ', '%20'))

    response = requests.get(url)
    FileUtils.dump_tmp_city('wu', city_code, response.text)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É

    # –µ—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –æ—à–∏–±–∫–∞
    if response.status_code != requests.codes.ok:
        return {
            'error': True,
            'error_msg': "–û—à–∏–±–∫–∞ –∫–∞–∫–∞—è-—Ç–æ:\n\n{}".format(str(response.status_code))
        }

    # –µ—Å–ª–∏ –≤—Å–µ –æ–∫
    return {
        'error': False,
        'json': response.json()
    }


class FileUtils:
    @staticmethod
    def safe_filename(filename: str) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ (–Ω–µ —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–∏–º–≤–æ–ª–æ–≤) –∏–º—è —Ñ–∞–π–ª–∞.
        https://stackoverflow.com/a/7406369/136559
        """
        return ''.join([c for c in filename if c.isalpha() or c.isdigit() or c == ' ']).rstrip()

    @staticmethod
    def get_dir_path(relative_dir: str) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ relative_dir. –í–µ—Ä–Ω–µ—Ç –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ '/' –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏.
        """
        current_dir = os.path.dirname(os.path.abspath(__file__))
        prepared_relative = relative_dir.strip('/\\') + '/'
        dirpath = os.path.dirname(os.path.join(current_dir, prepared_relative))
        os.makedirs(dirpath, exist_ok=True)
        return dirpath

    @staticmethod
    def dump_tmp_city(prefix: str, city_code: str, text: str) -> None:
        with open(FileUtils.get_tmp_file_path(prefix, city_code), 'w', encoding='utf-8') as f:
            f.write(text)

    @staticmethod
    def get_tmp_file_path(prefix: str, city_code: str) -> str:
        dirpath = FileUtils.get_dir_path(TMP_DIR)
        filename = FileUtils.safe_filename(city_code.replace('/', ' - '))
        filepath = f'{dirpath}/{prefix}_{filename}.json'
        return filepath

    @staticmethod
    def load_json(city_code: str):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç json –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        """
        with open(
                FileUtils.get_tmp_file_path('ya', city_code).format(city_code.replace('/', ' - ')),
                encoding='utf-8') as f:
            return json.load(f)


class WeatherBase:
    pass


def parse_jsons(jsons):
    return [parse(json_data, city_name, timezone) for city_name, timezone, json_data in jsons]


def make_requests(chat_id, weather_cities, debug=False):
    def make_request(city, debug=False):
        city_name, city_code, timezone, wu_city_code = city
        if debug:
            val = FileUtils.load_json(city_code)
        else:
            response = request(city_code)
            val = response['error_msg'] if response['error'] else response['json']
        return city_name, timezone, val

    if debug:
        return [make_request(city, debug=True) for city in weather_cities]

    cached_key = f'weather:{chat_id}:requests'
    cached = cache.get(cached_key)
    if cached:
        return cached

    num_of_workers = 3
    pool = ThreadPool(num_of_workers)
    results = pool.map(make_request, weather_cities)
    pool.close()
    pool.join()

    cache.set(cached_key, results, 30 * 60)  # —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –∫—ç—à–µ 30 –º–∏–Ω—É—Ç
    return results


def request(city_code: str):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —É –∞–ø–∏ –ø–æ–≥–æ–¥—É –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≥–æ—Ä–æ–¥—É

    :param str city_code: gps –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ (55.7507,37.6177)
    """
    api_key = CONFIG.get('weather_yandex_api_key')
    if not api_key:
        return
    # url = f'https://api.darksky.net/forecast/{api_key}/{city_code}?lang=ru&units=si&exclude=minutely,alerts,flags'
    lat, lon = city_code.split(',')
    url = f'https://api.weather.yandex.ru/v1/informers?lang=ru_RU&lat={lat}&lon={lon}'
    headers = {'X-Yandex-API-Key': api_key}

    response = requests.get(url, headers=headers)
    FileUtils.dump_tmp_city('ya', city_code, response.text)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É

    # –µ—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –æ—à–∏–±–∫–∞
    if response.status_code != requests.codes.ok:
        return {
            'error': True,
            'error_msg': f"–û—à–∏–±–∫–∞ –∫–∞–∫–∞—è-—Ç–æ:\n\n{str(response.status_code)}"
        }

    # –µ—Å–ª–∏ –≤—Å–µ –æ–∫
    return {
        'error': False,
        'json': response.json()
    }


def icon_to_emoji(icon, weather_description='‚ùì'):
    icons = {
        'clear': '‚òÄ',
        'clear-day': '‚òÄ',
        'clear-night': '‚òÄ',
        'sunny': '‚òÄ',
        'cloudy': '‚òÅ',
        'overcast': '‚òÅ',
        'overcast-and-rain': '‚òî',
        'mostlycloudy': '‚õÖ',
        'partlysunny': '‚õÖ',
        'mostlysunny': 'üå§',
        'partlycloudy': 'üå§',
        'partly-cloudy': 'üå§',
        'partly-cloudy-day': 'üå§',
        'partly-cloudy-night': 'üå§',
        'partly-cloudy-and-light-rain': 'üå§‚òî',
        'partly-cloudy-and-rain': 'üå§‚òî',
        'rain': '‚òî',
        'sleet': '‚òî‚ùÑ',
        'snow': 'üå®‚õÑ',
        'fog': 'üåÅ',
    }
    return icons.get(icon, weather_description.lower())


def get_later_data(data: dict, timezone: str):
    """
    –ß–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤ (—Ç.–µ. —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥)
    """
    return data.get('forecast', {}).get('parts', [])[0]


def get_later_name(data: dict) -> str:
    names = {
        'night': '–ù–æ—á—å—é',
        'morning': '–£—Ç—Ä–æ–º',
        'day': '–î–Ω–µ–º',
        'evening': '–í–µ—á–µ—Ä–æ–º',
    }
    return names.get(data.get('part_name', ''), '–ß–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤')


def parse(data, city_name, timezone) -> str:
    if isinstance(data, str):
        return f"<b>{city_name}</b> ‚Äî –û—à–∏–±–∫–∞: {data}\n"
    try:
        current_data = data.get('fact', {})
        current = parse_temp(current_data)
        uv_index = get_uv_index(current_data.get('uv_index', 0))

        later_data = get_later_data(data, timezone)
        later = '' if not later_data else f"\n‚Ä¢ {get_later_name(later_data)}: {parse_temp(later_data, later=True)}."

        city_time = arrow.now(timezone.strip('{}')).format('HH:mm')
        return f"<b>{city_name}</b> ({city_time})\n‚Ä¢ –°–µ–π—á–∞—Å: {current}.{uv_index}{later}\n"
    except Exception:
        return "<b>{}</b> ‚Äî –ê–ü–ò –≥–ª—é—á–∏—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –ø–æ–ª—á–∞—Å–∏–∫–∞\n".format(city_name)


def get_wind(wind_speed: Union[int, float], wind_gust: Union[int, float]) -> str:
    wind_speed = round(float(wind_speed))
    wind_gust = round(float(wind_gust))
    if wind_speed <= 0:
        if wind_gust <= 0:
            return ''
        return f'–ø–æ—Ä—ã–≤—ã –≤–µ—Ç—Ä–∞ –¥–æ {wind_gust} –º/—Å'
    wind = f'{wind_speed} –º/—Å'
    gust_gap = 4
    gust = f' (–ø–æ—Ä—ã–≤—ã –¥–æ {wind_gust} –º/—Å)' if wind_gust > wind_speed + gust_gap else ''
    return f'{wind}{gust}'


def get_temp(temperature: Union[int, float], apparent_temperature: Union[int, float, None]) -> str:
    temperature = round(float(temperature))
    temperature_str = f'{temperature}¬∞'
    apparent_str = ''
    if apparent_temperature:
        apparent_temperature = round(float(apparent_temperature))
        if abs(apparent_temperature - temperature) > 1:
            apparent_str = f' (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {apparent_temperature}¬∞)'
    return f'{temperature_str}{apparent_str}'.replace('-', '‚àí')


def get_uv_index(uv_index) -> str:
    """
    http://uvi.terrameteo.ru/uvi_description.php
    """
    if uv_index < 3:
        return ''

    if uv_index < 6:
        emoji = ''
    elif uv_index < 8:
        emoji = '‚ö†Ô∏è‚ö†Ô∏è'
    elif uv_index < 11:
        emoji = 'üî•üî•üî•'
    else:
        emoji = '‚ò†Ô∏è‚ò†Ô∏è‚ò†Ô∏è‚ò†Ô∏è'

    if uv_index < 8:
        uv_index_msg = '—Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞—â–∏—Ç–∞'
    else:
        uv_index_msg = '—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞'
    uv_index_msg = f'<a href="http://uvi.terrameteo.ru/uvi_description.php">{uv_index_msg}</a>'
    return f"\n‚Ä¢ –£–§-–∏–Ω–¥–µ–∫—Å ({uv_index}) {uv_index_msg} {emoji}."


def parse_temp(data: dict, later=False) -> str:
    temp = get_temp(data.get('temp', data.get('temp_avg')), data.get('feels_like', None))
    # icon_emoji = icon_to_emoji(data.get('condition'), get_summary(data.get('condition')))
    icon_emoji = get_summary(data.get('condition', ''))
    wind = get_wind(data.get('wind_speed', 0), data.get('wind_gust', 0))

    # –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤
    precip = ''
    # if later:
    #     precip_probability = round(float(data.get('precipProbability', 0) * 100))
    #     if precip_probability > 39:
    #         precip = f". –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {precip_probability}%"

    water = ''
    temp_water = data.get('temp_water', None)
    if temp_water:
        water = f'. –í–æ–¥–∞: {temp_water}¬∞'

    return f"{temp}, {icon_emoji}, {wind}{precip}{water}"


def get_summary(condition: str) -> str:
    variants = {
        'clear': '—è—Å–Ω–æ',
        'partly-cloudy': '–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ',
        'cloudy': '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏',
        'overcast': '–ø–∞—Å–º—É—Ä–Ω–æ',
        'partly-cloudy-and-light-rain': '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å',
        'partly-cloudy-and-rain': '–¥–æ–∂–¥—å',
        'overcast-and-rain': '—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
        'overcast-thunderstorms-with-rain': '—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å, –≥—Ä–æ–∑–∞',
        'cloudy-and-light-rain': '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å',
        'overcast-and-light-rain': '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å',
        'cloudy-and-rain': '–¥–æ–∂–¥—å',
        'overcast-and-wet-snow': '–¥–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º',
        'partly-cloudy-and-light-snow': '–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥',
        'partly-cloudy-and-snow': '—Å–Ω–µ–≥',
        'overcast-and-snow': '—Å–Ω–µ–≥–æ–ø–∞–¥',
        'cloudy-and-light-snow': '–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥',
        'overcast-and-light-snow': '–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥',
        'cloudy-and-snow': '—Å–Ω–µ–≥',
    }
    return variants.get(condition, '')
