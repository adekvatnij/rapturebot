# coding=UTF-8
from threading import Lock

import telegram

from src.config import CONFIG
from src.handlers_m.pipinder import send_pipinder
from src.utils.cache import cache, FEW_DAYS
from src.utils.handlers_decorators import chat_guard, collect_stats, command_guard
from src.utils.time_helpers import today_str

repinder_lock = Lock()

def can_use_repinder(_: telegram.Bot, __: int, user_id: int) -> bool:
    """
    –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–ø–∏–Ω–¥–µ—Ä?
    """
    if user_id in CONFIG.get('repinder_users', []):
        return True
    # if check_admin(bot, chat_id, user_id):
    #     return True
    return False


def generate_access_denied_text() -> str:
    """
    –ü—Ä–∏–¥—É–º—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è "–Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"
    """
    # msg = random.choice([
    #     '–û–π, —Ç–µ–±–µ –Ω–µ–ª—å–∑—è —ç—Ç–æ –Ω–∞–∂–∏–º–∞—Ç—å', 'ü§ê', 'üôä', '‚ùå', '–ù–µ–ª—å–∑—è', '–ó–∞–ø—Ä–µ—â–µ–Ω–æ', '–ù–µ—Ç—å',
    #     '–¢–µ–±–µ –Ω–µ–ª—å–∑—è', '–•—É–π', '–õ—É—á—à–µ –ø–∏–≤–∫–∞ –≤—ã–ø–µ–π', '–°—Ç–∏–∫–µ—Ä—ã-—Å—Ç–∏–∫–µ—Ä—ã, —Å—Ç–∏–∫–µ—Ä—ã-—Ö—É–∏–∫–µ—Ä—ã', '–¢—ã –ø–∏–¥–æ—Ä'])
    return '–ù–µ—Ç—å'


def is_delayed() -> bool:
    """
    –ó–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞. –ù–µ –±–æ–ª—å—à–µ N —Ä–∞–∑ –≤ M –º–∏–Ω—É—Ç
    """
    key = 'repinder_delayed'
    delay = cache.get(key, 0)
    if delay >= 4:
        return True
    cache.set(key, delay + 1, time=30 * 60)  # 30 –º–∏–Ω—É—Ç
    return False


def access_denied(_: telegram.Bot, message: telegram.Message) -> None:
    """
    –ù–µ–ø—Ä–æ—à–µ–Ω–Ω—ã–π –≥–æ—Å—Ç—å.
    """
    # –∑–∞—â–∏—Ç–∞ –æ—Ç —Ñ–ª—É–¥–∞. –Ω–µ –±–æ–ª—å—à–µ N —Ä–∞–∑ –≤ M –º–∏–Ω—É—Ç
    if is_delayed():
        return
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"
    message.reply_text(generate_access_denied_text())


def repinder_guard(f):
    def decorator(bot, update):
        message = update.message
        if not can_use_repinder(bot, message.chat_id, message.from_user.id):
            access_denied(bot, message)
            return
        return f(bot, update)

    return decorator


@chat_guard
@collect_stats
@command_guard
@repinder_guard
def repinder(bot: telegram.Bot, update: telegram.Update) -> None:
    key = f'pipinder:stickersets:{today_str()}'
    with repinder_lock:
        today_stickersets_names: list = cache.get(key, [])

        # –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ - —ç—Ç–æ –∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∏–π –ø–∞–∫.
        # —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –∑–∞–Ω–æ–≤–æ –≤—ã–∑—ã–≤–∞–µ–º –ø–∏–ø–∏–Ω–¥–µ—Ä
        try:
            today_stickersets_names.pop(0)
        except Exception:
            pass

        cache.set(key, today_stickersets_names, time=FEW_DAYS)
    send_pipinder(bot, update)
