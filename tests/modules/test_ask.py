import unittest
from typing import Iterable

from src.commands.ask.ask import Ask

ball_answers = ('–ë–µ—Å—Å–ø–æ—Ä–Ω–æ', '–ü—Ä–µ–¥—Ä–µ—à–µ–Ω–æ', '–ù–∏–∫–∞–∫–∏—Ö —Å–æ–º–Ω–µ–Ω–∏–π', '–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞', '–ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º',
                '–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è ‚Äî ¬´–¥–∞¬ª', '–í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ', '–•–æ—Ä–æ—à–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã', '–ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç ‚Äî ¬´–¥–∞¬ª', '–î–∞',
                '–õ—É—á—à–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å', '–î–∞–∂–µ –Ω–µ –¥—É–º–∞–π', '–ú–æ–π –æ—Ç–≤–µ—Ç ‚Äî ¬´–Ω–µ—Ç¬ª', '–ü–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º ‚Äî ¬´–Ω–µ—Ç¬ª',
                '–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ', '–í–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ', '–ù–µ—Ç')


def check(obj: unittest.TestCase, question: str, choices: Iterable[str]) -> None:
    """
    –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
    """
    limit = 1000
    for choice in choices:
        count = 0
        while count < limit:
            count += 1
            answer = Ask.ask(question)
            obj.assertIn(answer, choices)
            if choice == answer:
                break
        else:  # —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ limit, –Ω–æ —Ç–∞–∫ –∏ –Ω–µ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ choice
            obj.fail(f"'{choice}' not found as answer of '{question}'")


class YesNo(unittest.TestCase):
    def test_simple(self):
        check(self, '–±–æ—Ç —Ç—ã –º–Ω–µ –æ—Ç–≤–µ—Ç–∏—à—å', ball_answers)


class ChoicesViaColon(unittest.TestCase):
    def test_simple(self):
        check(self, '–≤—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç: –∑–µ–ª–µ–Ω—ã–π, –∫—Ä–∞—Å–Ω—ã–π –∏–ª–∏ –∂–µ–ª—Ç—ã–π?', ('–∑–µ–ª–µ–Ω—ã–π', '–∫—Ä–∞—Å–Ω—ã–π', '–∂–µ–ª—Ç—ã–π'))

    def test_ya(self):
        check(self, '—Å–∫–∞–∂–∏: —è –∫—Ä–∞—Å–∏–≤—ã–π –∏–ª–∏ —è —É–º–Ω—ã–π?', ('—Ç—ã –∫—Ä–∞—Å–∏–≤—ã–π', '—Ç—ã —É–º–Ω—ã–π'))


class ChoicesViaOr(unittest.TestCase):
    def test_simple(self):
        check(self, '–≥–∞–¥—é–∫–∞ –∏–ª–∏ —É–∂?', ('–≥–∞–¥—é–∫–∞', '—É–∂'))
        check(self, '–ø–æ–π—Ç–∏ –Ω–∞–ª–µ–≤–æ –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–æ?', ('–Ω–∞–ª–µ–≤–æ', '–Ω–∞–ø—Ä–∞–≤–æ'))
        check(self, '–∫—É–¥–∞ –º–Ω–µ –ø–æ–π—Ç–∏ –Ω–∞–ª–µ–≤–æ, –Ω–∞–≤–µ—Ä—Ö, –ø—Ä—è–º–æ –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–æ?', ('–Ω–∞–ª–µ–≤–æ', '–Ω–∞–ø—Ä–∞–≤–æ', '–ø—Ä—è–º–æ', '–Ω–∞–≤–µ—Ä—Ö'))
        check(self, '–º–Ω–µ –∫—É–ø–∏—Ç—å üêü, üê∏ –∏–ª–∏ üêç?', ('üêü', 'üê∏', 'üêç'))
        check(self, '—è –∫—Ä–∞—Å–∞–≤—á–∏–∫ –∏–ª–∏ —É–º–Ω–∏—Ü–∞?', ('—Ç—ã –∫—Ä–∞—Å–∞–≤—á–∏–∫', '—É–º–Ω–∏—Ü–∞'))
        check(self, '—è –∫—Ä–∞—Å–∞–≤—á–∏–∫ –∏–ª–∏ —è —É–º–Ω–∏—Ü–∞?', ('—Ç—ã –∫—Ä–∞—Å–∞–≤—á–∏–∫', '—Ç—ã —É–º–Ω–∏—Ü–∞'))

    def test_or_not(self):
        check(self, '–º–Ω–µ –µ—Å—Ç—å –º–æ—Ä–æ–∂–µ–Ω–Ω–æ–µ –∏–ª–∏ –Ω–µ—Ç???', ('–¥–∞', '–Ω–µ—Ç'))
